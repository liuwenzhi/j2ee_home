package lkhwtk.leetcode136;

/**
 * 核心思路：异或运算
 * 补充知识点：在学校时，学到的异或运算为0和1的计算，相同为0，不同为1
 * 1^1=0 0^0=0 1^0=1 0^1=1
 * 扩展一下：
 * 1、任何数字和0进行抑或运算得到的结果都是数字本身：46^0=46
 * 2、任何数字和自身做抑或运算得到的都是0：46^46=0
 * 3、抑或运算满足交换律和结合律
 * 本题的思路为：数组中全部数据做抑或运算，得到的最终结果就是只出现一次的数字
 * 证明：比如数组中数字为a0,a0,a1,a1,a2,a2,a3
 * a0^a0^a1^a1^a2^a2^a3=(a0^a0)^(a1^a1)^(a2^a2)^a3=0^0^0^a3=a3
 * 方便编程：可以在前边再加一个0
 * 0^a0^a0^a1^a1^a2^a2^a3=0^(a0^a0)^(a1^a1)^(a2^a2)^a3=0^0^0^0^a3=a3
 * 本题同540题，389题是本题的算法的字符实现
 */
public class Solution {
    public int singleNumber(int[] nums) {
        int single = 0;
        for (int num : nums) {
            single ^= num;
        }
        return single;
    }
}

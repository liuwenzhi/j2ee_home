package lkhwtk.leetcode371;

/**
 * 371. 两整数之和
 * 参考题解：利用位操作实现两数求和
 * 核心思路：求a+b,重复两个步骤：不算进位累加值赋值给a，计算进位值赋值给b，a和b重复这两个步骤，直到进位值b=0
 * 其中：不算进位累加值是a^b，抑或计算的特点是相同为0不同为1，正好可以作为两个数不算进位累加值，计算每一位的
 * 进位可以(a&b) <<1 ，每一位值为1就相当于有进位，则左移一位，作为下一次计算的变量。
 */
public class Solution {
    public int getSum(int a, int b) {
        while(b != 0){
            //不算进位累加和，相当于二进制的抑或操作
            int temp = a ^ b;
            //算上进位，与操作再左移一位，之后重复抑或操作，与操作，左移操作
            b = (a & b) << 1;
            a = temp;
        }
        return a;
    }

}
